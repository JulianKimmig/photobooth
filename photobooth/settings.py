"""
Django settings for photobooth project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import random
from json_dict import JsonDict
from shutil import copyfile

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

try:
    if not os.path.exists(os.path.join(BASE_DIR,"config.json")):
        copyfile(os.path.join(BASE_DIR,"config_basic.json"), os.path.join(BASE_DIR,"config.json"))
except:pass

JCONFIG = JsonDict(os.path.join(BASE_DIR,"config.json"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = JCONFIG.get("settings","server","secret_key",default=''.join(random.SystemRandom().choice('abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)') for i in range(50)))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = JCONFIG.get("settings","server","debug",default=True)

ALLOWED_HOSTS = JCONFIG.get("settings","server","allowed_hosts",default=[])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'photobooth_app.apps.PhotoboothAppConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'photobooth.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'photobooth.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR,"static"),
)

TEMPDIR=os.path.join(STATICFILES_DIRS[0],"temp")
if not os.path.exists(TEMPDIR):
    os.makedirs(TEMPDIR)



USEPICAMERA = JCONFIG.get("settings","photobooth","use_pi_camera",default=False)
if USEPICAMERA:
    try:
        from picamera import PiCamera
    except:
        print("CANNOT INITALIZE PICAMER")
        USEPICAMERA = False
USEGPHOTO = JCONFIG.get("settings","photobooth","use_gphoto",default=True)
if USEGPHOTO:
    try:
        from shutil import which

        if which("gphoto2") is None:
            USEGPHOTO = False
            print("GPHOTO2 NOT FOUND")
    except:
        USEGPHOTO = False

ALLOW_PRINTING = JCONFIG.get("settings","photobooth","use_pi_camera",default=True)
SHOWBUTTONS=JCONFIG.get("settings","photobooth","show_buttons"
                                                "",default=False)
MARK_QR_CODES= JCONFIG.get("settings","photobooth","mark_qr_codes",default=False)
